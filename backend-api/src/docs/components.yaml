components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
          readOnly: true
          description: The unique ID of the user (generated by the system)
        username:
          type: string
          description: The username of the user
        email:
          type: string
          format: email
          description: The email of the user
        password:
          type: string
          format: password
          description: The password of the user
        full_name:
          type: string
          description: The full name of the user
        signup_date:
          type: string
          format: date-time
          readOnly: true
          description: The date and time when the user signed up
          example: "2023-01-15T08:45:30.000Z"
        avatar:
          type: string
          format: uri
          nullable: true
          readOnly: true
          description: The path of the user's avatar
        avatarFile:
          type: string
          format: binary
          writeOnly: true
          description: User avatar file
    Genre:
      type: object
      properties:
        genre_id:
          type: integer
          readOnly: true
          description: The unique ID of the genre (generated by the system)
        genre_name:
          type: string
          description: The name of the genre
          example: Pop
    Artist:
      type: object
      properties:
        artist_id:
          type: integer
          readOnly: true
          description: The unique ID of the artist (generated by the system)
        artist_name:
          type: string
          description: The name of the artist
          example: "Taylor Swift"
        bio:
          type: string
          description: A brief biography of the artist
          nullable: true
        country:
          type: string
          description: The country of the artist
          nullable: true
        avatar:
          type: string
          format: uri
          nullable: true
          readOnly: true
          description: The path of the Artist avatar
        avatarFile:
          type: string
          format: binary
          writeOnly: true
          description: the Artist avatar file
    Song:
      type: object
      properties:
        song_id:
          type: integer
          description: The unique ID of the song (generated by the system)
          readOnly: true
          example: 1
        song_name:
          type: string
          description: Name of song
        duration:
          type: integer
          description: Duration of song
        genre_id:
          type: integer
          description: The unique ID of the genre
        release_date:
          type: date
          description: Song release date
        streaming_count:
          type: integer
          description: Listens
          readOnly: true
        sound:
          type: string
          format: uri
          nullable: true
          readOnly: true
          description: The path of the song's sound
        soundFile:
          type: string
          format: binary
          writeOnly: true
          description: Song sound
        avatar:
          type: string
          format: uri
          nullable: true
          readOnly: true
          description: The path of the S's avatar
        avatarFile:
          type: string
          format: binary
          writeOnly: true
          description: Song avatar file
    PaginationMetadata:
      type: object
      properties:
        totalRecords:
          type: integer
          default: 0
          description: The total number of records
        firstPage:
          type: integer
          default: 1
          description: The first page
        lastPage:
          type: integer
          default: 1
          description: The last page
        page:
          type: integer
          default: 1
          description: The current page
        limit:
          type: integer
          default: 5
          description: The number of records per page
  responses:
    "404NotFound":
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: The response status
                enum: [fail]
              message:
                type: string
                description: A human-readable error message
                example: "Playlist not found"
    "500ServerError":
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: The response status
                enum: [error]
              message:
                type: string
                description: A human-readable error message
                example: "An error occurred while processing the request"
  parameters:
    userIdParam:
      name: id
      description: Get user by ID
      required: true
      in: path
      schema:
        type: integer
        example: 211
    genreIdParam:
      name: id
      description: Get genre by id
      required: true
      in: path
      schema:
        type: integer
        example: 1
    artistIdParam:
      name: artist_id
      description: Get artist by id
      required: true
      in: path
      schema:
        type: integer
    songIdParam:
      name: song_id
      in: path
      required: true
      schema:
        type: integer
      description: The ID of the song

    limitParam:
      name: limit
      description: Number of records per page
      in: query
      schema:
        type: integer
        default: 5
        minimum: 1
        maximum: 100
      required: false
    pageParam:
      name: page
      description: Page number of records
      in: query
      schema:
        type: integer
        default: 1
        minimum: 1
      required: false
